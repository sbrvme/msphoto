---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Monika Skierecka Fotografia",
  description = "Portfolio Moniki Skiereckiej obejmujące szeroki zakres tematów, w tym zdjęcia w plenerze, studio, rodzinne, produktowe, nieruchomości oraz sesje świąteczne. Każda kategoria charakteryzuje się dbałością o detale i wysoką jakością wykonania.",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1, maximum-scale=1,user-scalable=0"
/>
<link
  rel="preload"
  as="font"
  href="/fonts/Lato-LightItalic.woff2"
  crossorigin="anonymous"
/>
<link
  rel="preload"
  as="font"
  href="/fonts/Lato-Italic.woff2"
  crossorigin="anonymous"
/>
<link
  rel="preload"
  as="font"
  href="/fonts/Lato-Light.woff2"
  crossorigin="anonymous"
/>
<meta name="generator" content={Astro.generator} />
<title>{title}</title>
<!-- <link rel="preconnect" href="https://fonts.googleapis.com"> -->
<!-- <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin> -->
<!-- <link href="https://fonts.googleapis.com/css2?family=Lato:wght@200;300;400;500;600;700;800;900&display=swap" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;1,300;1,400&display=swap" rel="stylesheet"> -->
<link rel="icon" type="image/svg+xml" href="/favicon.ico" />

<!-- <script is:inline> 
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script> -->
